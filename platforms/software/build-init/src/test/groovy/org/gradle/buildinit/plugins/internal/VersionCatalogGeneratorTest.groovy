/*
 * Copyright 2023 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.gradle.buildinit.plugins.internal

import org.gradle.api.file.Directory
import org.gradle.test.fixtures.file.TestNameTestDirectoryProvider
import org.junit.Rule
import spock.lang.Specification

import static org.gradle.util.internal.TextUtil.toPlatformLineSeparators

class VersionCatalogGeneratorTest extends Specification {
    private static final String COMMON_START = """# This file was generated by the Gradle 'init' task.
# https://docs.gradle.org/current/userguide/platforms.html#sub::toml-dependencies-format
"""
    @Rule
    TestNameTestDirectoryProvider tmpDir = new TestNameTestDirectoryProvider(getClass())

    Directory target = Mock()
    File versionCatalogFile = tmpDir.file("gradle/libs.versions.toml")
    BuildContentGenerationContext buildContentGenerationContext
    VersionCatalogDependencyRegistry versionCatalogDependencyRegistry
    VersionCatalogGenerator versionCatalogGenerator

    def setup() {
        target.getAsFile() >> tmpDir.file(".")
        versionCatalogDependencyRegistry = new VersionCatalogDependencyRegistry()
        buildContentGenerationContext = new BuildContentGenerationContext(versionCatalogDependencyRegistry)
        versionCatalogGenerator = VersionCatalogGenerator.create(target)
    }

    def "generates empty gradle/libs.versions.toml file for empty registry"() {
        setup:

        when:
        versionCatalogGenerator.generate(buildContentGenerationContext)

        then:
        versionCatalogFile.file
        versionCatalogFile.text == toPlatformLineSeparators(COMMON_START)
    }

    def "generates version and library based on module"() {
        setup:
        versionCatalogDependencyRegistry.registerLibrary(true, "com.example.group:long", "v1")
        versionCatalogDependencyRegistry.registerLibrary(false, "com.example.group:short", "v2")

        when:
        versionCatalogGenerator.generate(buildContentGenerationContext)

        then:
        versionCatalogFile.file
        versionCatalogFile.text == toPlatformLineSeparators("""$COMMON_START
[versions]
com-example-group-long = "v1"
short = "v2"

[libraries]
com-example-group-long = { module = "com.example.group:long", version.ref = "com-example-group-long" }
short = { module = "com.example.group:short", version.ref = "short" }
""")
    }

    def "merges multiple libraries when encountering identical coordinates"() {
        setup:
        versionCatalogDependencyRegistry.registerLibrary(true, "group:artifact", "1.1")
        versionCatalogDependencyRegistry.registerLibrary(true, "group:artifact", "1.1")
        versionCatalogDependencyRegistry.registerLibrary(false, "group:artifact", "1.1")

        when:
        versionCatalogGenerator.generate(buildContentGenerationContext)

        then:
        versionCatalogFile.file
        versionCatalogFile.text == toPlatformLineSeparators("""$COMMON_START
[versions]
group-artifact = "1.1"

[libraries]
group-artifact = { module = "group:artifact", version.ref = "group-artifact" }
""")
    }

    def "generates multiple versions when encountering different versions"() {
        setup:
        versionCatalogDependencyRegistry.registerLibrary(true, "group:long", "1.1")
        versionCatalogDependencyRegistry.registerLibrary(true, "group:long", "1.2")
        versionCatalogDependencyRegistry.registerLibrary(false, "group:short", "1.1")
        versionCatalogDependencyRegistry.registerLibrary(false, "group:short", "1.2")

        when:
        versionCatalogGenerator.generate(buildContentGenerationContext)

        then:
        versionCatalogFile.file
        versionCatalogFile.text == toPlatformLineSeparators("""$COMMON_START
[versions]
group-long = "1.1"
group-long-x1 = "1.2"
short = "1.1"
short-x1 = "1.2"

[libraries]
group-long = { module = "group:long", version.ref = "group-long" }
group-long-x1 = { module = "group:long", version.ref = "group-long-x1" }
short = { module = "group:short", version.ref = "short" }
short-x1 = { module = "group:short", version.ref = "short-x1" }
""")
    }

    def "generates valid identifiers"() {
        setup:
        versionCatalogDependencyRegistry.registerLibrary(true, "JUnit:something", "4")
        versionCatalogDependencyRegistry.registerLibrary(true, "group:artifact_5", "1.1.1")
        versionCatalogDependencyRegistry.registerLibrary(false, "something:JUnit", "4")
        versionCatalogDependencyRegistry.registerLibrary(false, "something:artifact_5", "1.1.1")

        when:
        versionCatalogGenerator.generate(buildContentGenerationContext)

        then:
        versionCatalogFile.file
        versionCatalogFile.text == toPlatformLineSeparators("""$COMMON_START
[versions]
artifact-v5 = "1.1.1"
group-artifact-v5 = "1.1.1"
junit = "4"
junit-something = "4"

[libraries]
artifact-v5 = { module = "something:artifact_5", version.ref = "artifact-v5" }
group-artifact-v5 = { module = "group:artifact_5", version.ref = "group-artifact-v5" }
junit = { module = "something:JUnit", version.ref = "junit" }
junit-something = { module = "JUnit:something", version.ref = "junit-something" }
""")
    }

    def "generates plugin"() {
        setup:
        versionCatalogDependencyRegistry.registerPlugin(true, "com.example.long", "1337")
        versionCatalogDependencyRegistry.registerPlugin(false, "com.example.short", "42")

        when:
        versionCatalogGenerator.generate(buildContentGenerationContext)

        then:
        versionCatalogFile.file
        versionCatalogFile.text == toPlatformLineSeparators("""$COMMON_START
[plugins]
com-example-long = { id = "com.example.long", version = "1337" }
short = { id = "com.example.short", version = "42" }
""")
    }
}
